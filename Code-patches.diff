diff --git core/pom.xml core/pom.xml
index d473d69..cce2e9f 100644
--- core/pom.xml
+++ core/pom.xml
@@ -68,6 +68,7 @@
                 <artifactItem><groupId>org.apache.tez</groupId><artifactId>tez-runtime-library</artifactId><version>${tez.version}</version></artifactItem>
                 <artifactItem><groupId>org.apache.tez</groupId><artifactId>tez-mapreduce</artifactId><version>${tez.version}</version></artifactItem>
                 <artifactItem><groupId>org.apache.tez</groupId><artifactId>tez-yarn-timeline-history-with-acls</artifactId><version>${tez.version}</version></artifactItem>
+                <artifactItem><groupId>org.apache.hive</groupId><artifactId>hive-exec</artifactId><version>${hive.version}</version><classifier>core</classifier></artifactItem>
               </artifactItems>
               <outputDirectory>${project.build.directory}/ivy/lib/Pig</outputDirectory>
               <overWriteReleases>false</overWriteReleases>
diff --git core/src/test/java/org/apache/pig/builtin/TestOrcStoragePushdown.java core/src/test/java/org/apache/pig/builtin/TestOrcStoragePushdown.java
index 3bb1cb9..cb99fc5 100644
--- core/src/test/java/org/apache/pig/builtin/TestOrcStoragePushdown.java
+++ core/src/test/java/org/apache/pig/builtin/TestOrcStoragePushdown.java
@@ -17,6 +17,7 @@
  */
 package org.apache.pig.builtin;
 
+import static org.apache.pig.test.MiniGenericCluster.EXECTYPE_MR;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
@@ -33,6 +34,9 @@ import java.util.List;
 
 import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.commons.lang3.RandomUtils;
+import org.apache.hadoop.fs.LocatedFileStatus;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.RemoteIterator;
 import org.apache.hadoop.hive.ql.io.sarg.SearchArgument;
 import org.apache.log4j.FileAppender;
 import org.apache.log4j.Level;
@@ -83,7 +87,7 @@ public class TestOrcStoragePushdown {
 
     @BeforeClass
     public static void oneTimeSetup() throws Exception{
-        cluster = MiniGenericCluster.buildCluster();
+        cluster = MiniGenericCluster.buildCluster(EXECTYPE_MR);
         Util.copyFromLocalToCluster(cluster, basedir + "orc-file-11-format.orc", basedir + "orc-file-11-format.orc");
         Util.copyFromLocalToCluster(cluster, basedir + "charvarchar.orc", basedir + "charvarchar.orc");
         createInputData();
@@ -164,9 +168,29 @@ public class TestOrcStoragePushdown {
 
         Util.copyFromLocalToCluster(cluster, inputTxtFile, inputTxtFile);
 
+        listAllFilesInCluster("1");
         // Store only 1000 rows in each row block (MIN_ROW_INDEX_STRIDE is 1000. So can't use less than that)
         pigServer.registerQuery("A = load '" + Util.generateURI(inputTxtFile, pigServer.getPigContext()) + "' as (f1:boolean, f2:int, f3:int, f4:int, f5:long, f6:float, f7:double, f8:bytearray, f9:chararray, f10:datetime, f11:bigdecimal);");
-        pigServer.registerQuery("store A into '" + INPUT +"' using OrcStorage('-r 1000 -s 100000');");
+        listAllFilesInCluster("2");
+        pigServer.registerQuery("store A into '" + Util.generateURI(INPUT, pigServer.getPigContext()) + ".txt' using PigStorage();");
+        pigServer.registerQuery("store A into '" + Util.generateURI(INPUT, pigServer.getPigContext()) + "' using OrcStorage('-r 1000 -s 100000');");
+        listAllFilesInCluster("3");
+
+        Util.copyFromClusterToLocal(cluster, INPUT + ".txt", "target/__INPUT.txt");
+        Util.copyFromClusterToLocal(cluster, INPUT, "target/__INPUT.orc");
+    }
+
+    private static void listAllFilesInCluster(String tag) throws IOException {
+        System.err.println("");
+        System.err.println("===================================================================== " + tag);
+        RemoteIterator<LocatedFileStatus> iter = cluster.getFileSystem().listFiles(new Path("/"), true);
+        LocatedFileStatus lfs = null;
+        while (iter.hasNext()) {
+            lfs = iter.next();
+            System.err.println(lfs);
+        }
+        System.err.println("DONE");
+        System.err.println("===================================================================== " + tag);
     }
 
     @AfterClass
@@ -371,6 +395,7 @@ public class TestOrcStoragePushdown {
     }
 
     private void testPredicatePushdown(String inputFile, String filterStmt, int expectedRows, int expectedBytesReadDiff) throws IOException {
+        Util.copyFromClusterToLocal(cluster, inputFile , "/tmp/xxxxxx");
 
         Util.resetStateForExecModeSwitch();
         // Minicluster is required to get hdfs bytes read counter value
@@ -386,6 +411,8 @@ public class TestOrcStoragePushdown {
         pigServer_disabledRule.registerQuery("C = filter B by " + filterStmt + ";");
         ExecJob job = pigServer_disabledRule.store("C", OUTPUT3);
         //Util.copyFromClusterToLocal(cluster, OUTPUT3 + "/part-m-00000", OUTPUT3);
+
+
         JobStats stats = (JobStats) job.getStatistics().getJobGraph().getSources().get(0);
         assertEquals(expectedRows, stats.getRecordWrittern());
         long bytesWithoutPushdown = stats.getHdfsBytesRead();
diff --git core/src/test/java/org/apache/pig/impl/builtin/TestStreamingUDF.java core/src/test/java/org/apache/pig/impl/builtin/TestStreamingUDF.java
index 888be28..a5563c6 100644
--- core/src/test/java/org/apache/pig/impl/builtin/TestStreamingUDF.java
+++ core/src/test/java/org/apache/pig/impl/builtin/TestStreamingUDF.java
@@ -18,6 +18,7 @@
 package org.apache.pig.impl.builtin;
 
 import static org.apache.pig.builtin.mock.Storage.resetData;
+import static org.apache.pig.test.MiniGenericCluster.EXECTYPE_MR;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
@@ -64,7 +65,7 @@ public class TestStreamingUDF {
 
     @BeforeClass
     public static void oneTimeSetup() {
-        cluster = MiniGenericCluster.buildCluster();
+        cluster = MiniGenericCluster.buildCluster(EXECTYPE_MR);
     }
 
     @AfterClass
diff --git core/src/test/java/org/apache/pig/test/MiniGenericCluster.java core/src/test/java/org/apache/pig/test/MiniGenericCluster.java
index 674860f..925d71c 100644
--- core/src/test/java/org/apache/pig/test/MiniGenericCluster.java
+++ core/src/test/java/org/apache/pig/test/MiniGenericCluster.java
@@ -26,6 +26,7 @@ import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.pig.ExecType;
 import org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil;
 import org.apache.pig.backend.hadoop.executionengine.Launcher;
+import org.apache.pig.tools.pigstats.ScriptState;
 
 /**
  * This class builds a single instance of itself with the Singleton
@@ -44,11 +45,26 @@ abstract public class MiniGenericCluster {
     protected Configuration m_conf = null;
 
     protected static MiniGenericCluster INSTANCE = null;
-    protected static boolean isSetup = false;
 
-    public static String EXECTYPE_MR = "mr";
-    public static String EXECTYPE_TEZ = "tez";
-    public static String EXECTYPE_SPARK = "spark";
+    public static final String EXECTYPE_MR = "mr";
+    public static final String EXECTYPE_TEZ = "tez";
+    public static final String EXECTYPE_SPARK = "spark";
+
+    public static MiniGenericCluster initializeMiniCluster(String execType)  {
+        System.setProperty("test.exec.type", execType);
+        return buildCluster(execType);
+    }
+
+    private static String desiredExecType() {
+        String execType = System.getProperty("test.exec.type");
+        if (execType == null) {
+            execType = EXECTYPE_MR;
+            System.setProperty("test.exec.type", EXECTYPE_MR);
+        } else {
+            execType = execType.toLowerCase();
+        }
+        return execType;
+    }
 
     /**
      * Returns the single instance of class MiniGenericCluster that represents
@@ -57,34 +73,37 @@ abstract public class MiniGenericCluster {
      * cluster will be returned.
      */
     public static MiniGenericCluster buildCluster() {
-        if (INSTANCE == null) {
-            String execType = System.getProperty("test.exec.type");
-            if (execType == null) {
-                // Default to MR
-                System.setProperty("test.exec.type", EXECTYPE_MR);
-                return buildCluster(EXECTYPE_MR);
-            }
-
-            return buildCluster(execType);
-        }
-        return INSTANCE;
+        return buildCluster(desiredExecType());
     }
 
     public static MiniGenericCluster buildCluster(String execType) {
-        if (INSTANCE == null) {
-            if (execType.equalsIgnoreCase(EXECTYPE_MR)) {
-                INSTANCE = new MiniCluster();
-            } else if (execType.equalsIgnoreCase(EXECTYPE_TEZ)) {
-                INSTANCE = new TezMiniCluster();
-            } else if (execType.equalsIgnoreCase(EXECTYPE_SPARK)) {
-                INSTANCE = new SparkMiniCluster();
-            } else {
-                throw new RuntimeException("Unknown test.exec.type: " + execType);
+        if (INSTANCE != null) {
+            String instanceExecType = INSTANCE.getExecType().name();
+            if (!instanceExecType.equalsIgnoreCase(execType)){
+                INSTANCE.shutdownMiniDfsAndMrClusters();
+                INSTANCE = null;
             }
         }
-        if (!isSetup) {
+        if (INSTANCE == null) {
+            System.err.println("XXXXXXXXXXXXXX Creating new TEST cluster:" + execType);
+
+            // Force the script state to be reinitialized
+            ScriptState.start(null);
+
+            switch (execType) {
+                case EXECTYPE_MR:
+                    INSTANCE = new MiniCluster();
+                    break;
+                case EXECTYPE_TEZ:
+                    INSTANCE = new TezMiniCluster();
+                    break;
+                case EXECTYPE_SPARK:
+                    INSTANCE = new SparkMiniCluster();
+                    break;
+                default:
+                    throw new RuntimeException("Unknown test.exec.type: " + execType);
+            }
             INSTANCE.setupMiniDfsAndMrClusters();
-            isSetup = true;
         }
         return INSTANCE;
     }
@@ -103,7 +122,6 @@ abstract public class MiniGenericCluster {
     }
 
     protected void shutdownMiniDfsAndMrClusters() {
-        isSetup = false;
         shutdownMiniDfsClusters();
         shutdownMiniMrClusters();
         m_conf = null;
@@ -145,25 +163,23 @@ abstract public class MiniGenericCluster {
      * Throw RunTimeException if isSetup is false
      */
     private void errorIfNotSetup(){
-        if(isSetup)
-            return;
-        String msg = "function called on MiniCluster that has been shutdown";
-        throw new RuntimeException(msg);
+        if(INSTANCE == null) {
+            String msg = "function called on MiniCluster that has been shutdown";
+            throw new RuntimeException(msg);
+        }
     }
 
     static public Launcher getLauncher() {
-        String execType = System.getProperty("test.exec.type");
-        if (execType == null) {
-            System.setProperty("test.exec.type", EXECTYPE_MR);
-        }
-        if (execType.equalsIgnoreCase(EXECTYPE_MR)) {
-            return MiniCluster.getLauncher();
-        } else if (execType.equalsIgnoreCase(EXECTYPE_TEZ)) {
-            return TezMiniCluster.getLauncher();
-        } else if(execType.equalsIgnoreCase(EXECTYPE_SPARK)){
-            return SparkMiniCluster.getLauncher();
-        } else{
-            throw new RuntimeException("Unknown test.exec.type: " + execType);
+        String execType = desiredExecType();
+        switch (execType) {
+            case EXECTYPE_MR:
+                return MiniCluster.getLauncher();
+            case EXECTYPE_TEZ:
+                return TezMiniCluster.getLauncher();
+            case EXECTYPE_SPARK:
+                return SparkMiniCluster.getLauncher();
+            default:
+                throw new RuntimeException("Unknown test.exec.type: " + execType);
         }
     }
 }
diff --git core/src/test/java/org/apache/pig/test/TestPigStats.java core/src/test/java/org/apache/pig/test/TestPigStats.java
index 2cea713..fca54e9 100644
--- core/src/test/java/org/apache/pig/test/TestPigStats.java
+++ core/src/test/java/org/apache/pig/test/TestPigStats.java
@@ -30,6 +30,7 @@ import org.apache.commons.io.FileUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.pig.ExecType;
 import org.apache.pig.PigServer;
 import org.apache.pig.backend.executionengine.ExecJob;
 import org.apache.pig.backend.hadoop.executionengine.HExecutionEngine;
@@ -38,6 +39,8 @@ import org.apache.pig.impl.PigContext;
 import org.apache.pig.impl.util.ObjectSerializer;
 import org.apache.pig.newplan.logical.relational.LogicalPlan;
 import org.apache.pig.tools.pigstats.PigStats;
+import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 
diff --git core/src/test/java/org/apache/pig/test/TestPigStatsMR.java core/src/test/java/org/apache/pig/test/TestPigStatsMR.java
index 7dc0135..07391bd 100644
--- core/src/test/java/org/apache/pig/test/TestPigStatsMR.java
+++ core/src/test/java/org/apache/pig/test/TestPigStatsMR.java
@@ -17,6 +17,8 @@
  */
 package org.apache.pig.test;
 
+import static org.apache.pig.test.MiniGenericCluster.EXECTYPE_MR;
+import static org.apache.pig.test.MiniGenericCluster.EXECTYPE_TEZ;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
@@ -39,9 +41,15 @@ import org.apache.pig.tools.pigstats.PigStats;
 import org.apache.pig.tools.pigstats.PigStats.JobGraph;
 import org.apache.pig.tools.pigstats.ScriptState;
 import org.apache.pig.tools.pigstats.mapreduce.MRScriptState;
+import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 public class TestPigStatsMR extends TestPigStats {
+    @BeforeClass
+    public static void ensureRightTestCluster(){
+        MiniGenericCluster.initializeMiniCluster(EXECTYPE_MR);
+    }
 
     @Override
     @Test
diff --git core/src/test/java/org/apache/pig/tez/TestPigStatsTez.java core/src/test/java/org/apache/pig/tez/TestPigStatsTez.java
index f0a9da8..5cb0462 100644
--- core/src/test/java/org/apache/pig/tez/TestPigStatsTez.java
+++ core/src/test/java/org/apache/pig/tez/TestPigStatsTez.java
@@ -17,6 +17,7 @@
  */
 package org.apache.pig.tez;
 
+import static org.apache.pig.test.MiniGenericCluster.EXECTYPE_TEZ;
 import static org.junit.Assert.assertEquals;
 
 import java.io.File;
@@ -31,13 +32,22 @@ import org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator;
 import org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer;
 import org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode;
 import org.apache.pig.impl.PigContext;
+import org.apache.pig.test.MiniGenericCluster;
 import org.apache.pig.test.TestPigStats;
 import org.apache.pig.tools.pigstats.PigStats.JobGraph;
 import org.apache.pig.tools.pigstats.tez.TezPigScriptStats;
 import org.apache.pig.tools.pigstats.tez.TezScriptState;
 import org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo;
+import org.junit.Before;
+import org.junit.BeforeClass;
 
 public class TestPigStatsTez extends TestPigStats {
+
+    @BeforeClass
+    public static void ensureRightTestCluster(){
+        MiniGenericCluster.initializeMiniCluster(EXECTYPE_TEZ);
+    }
+
     @Override
     public void addSettingsToConf(Configuration conf, String scriptFileName) throws IOException {
         TezScriptState ss = TezScriptState.get();
diff --git piggybank/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVStorage.java piggybank/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVStorage.java
index 0d4ab6a..c580f51 100644
--- piggybank/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVStorage.java
+++ piggybank/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVStorage.java
@@ -40,10 +40,8 @@ public class TestCSVStorage {
     protected static final Log LOG = LogFactory.getLog(TestCSVStorage.class);
 
     private PigServer pigServer;
-    private MiniGenericCluster cluster;
 
     public TestCSVStorage() throws ExecException, IOException {
-        cluster = MiniGenericCluster.buildCluster();
         pigServer = new PigServer(ExecType.LOCAL, new Properties());
         pigServer.getPigContext().getProperties()
                 .setProperty(MRConfiguration.MAP_MAX_ATTEMPTS, "1");
